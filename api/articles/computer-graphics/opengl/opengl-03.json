{"title":"OpenGL - Creating a window","uid":"28d97a9714322db76ed5f13f13ad12ec","slug":"computer-graphics/opengl/opengl-03","date":"2022-08-07T08:46:26.000Z","updated":"2022-08-16T08:21:58.286Z","comments":true,"path":"api/articles/computer-graphics/opengl/opengl-03.json","keywords":null,"cover":[],"content":"<h1 id=\"Creating-a-window\"><a href=\"#Creating-a-window\" class=\"headerlink\" title=\"Creating a window\"></a>Creating a window</h1><p>创建窗口是第一步，然而OpenGL仅仅是定义了一系列关于窗口的操作api，而这些操作api实际执行和操作系统和硬件都有很大关系。这也意味着开发者必须自己处理这些问题。</p>\n<p>不过，幸运的是我们可以使用一些库来避免自己处理这些问题。例如GLUT,GLFW,SDL,SFML等。</p>\n<h2 id=\"GLFW\"><a href=\"#GLFW\" class=\"headerlink\" title=\"GLFW\"></a>GLFW</h2><p>Ubuntu下安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 安装opengl、glfw、glew库\nsudo apt install libglfw3 libglfw3-dev libopengl-dev libglew2.2 libglew-dev</code></pre>\n\n\n<h2 id=\"GLAD\"><a href=\"#GLAD\" class=\"headerlink\" title=\"GLAD\"></a>GLAD</h2><p>除了GLFW来帮助解决窗口外，还需要使用GLAD解决函数指针问题。OpenGL仅仅是一套标准，有大量需要使用的函数在写代码时候是不确定其实际位置的(和驱动相关)，所以需要通过查找函数名的方式来确定其运行时地址。</p>\n<p>打开<a href=\"https://glad.dav1d.de/\">glad官网</a></p>\n<p><img src=\"computer-graphics/opengl/opengl-03/2022-08-07_17-04.png\" alt=\"img\"></p>\n<p>将下载好的glad.c文件拷贝到项目目录, glad和KHR文件夹复制到&#x2F;usr&#x2F;local&#x2F;include&#x2F;目录下</p>\n<h2 id=\"编写代码\"><a href=\"#编写代码\" class=\"headerlink\" title=\"编写代码\"></a>编写代码</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;glad&#x2F;glad.h&gt;\n#include &lt;GLFW&#x2F;glfw3.h&gt;\n\n#include &lt;iostream&gt;\n\nvoid framebuffer_size_callback(GLFWwindow *window, int width, int height);\nvoid process_keyboard_input(GLFWwindow *window);\n\nint main(void)\n&#123;\n\n    &#x2F;&#x2F; 初始化glfw\n    GLFWwindow *window;\n    int w_width &#x3D; 1920, w_height &#x3D; 1080;\n\n    if (!glfwInit())\n    &#123;\n        std::cout &lt;&lt; &quot;failed to init glfw&quot; &lt;&lt; std::endl;\n        return -1;\n    &#125;\n\n    window &#x3D; glfwCreateWindow(1920, 1080, &quot;cube&quot;, NULL, NULL);\n    if (!window)\n    &#123;\n        std::cout &lt;&lt; &quot;failed to create window&quot; &lt;&lt; std::endl;\n        glfwTerminate();\n        return -1;\n    &#125;\n\n    &#x2F;&#x2F; 创建上下文\n    glfwMakeContextCurrent(window);\n\n    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n    &#123;\n        std::cout &lt;&lt; &quot;failed to init glad&quot; &lt;&lt; std::endl;\n        return -1;\n    &#125;\n\n    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n\n    while (!glfwWindowShouldClose(window))\n    &#123;\n        &#x2F;&#x2F; 处理键盘事件\n        process_keyboard_input(window);\n\n        glClearColor(0.2, 0.4, 0.6, 1.0);\n\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        &#x2F;&#x2F; 设置点信息\n        glPointSize(10);\n        glColor3ub(125, 255, 255);\n        \n        &#x2F;&#x2F; 画三个点,平面坐标范围是(-1, 1)\n        glBegin(GL_POINTS);\n        glVertex3f(0, 0, 0);\n        glVertex3f(0.5, 0, 0);\n        glVertex3f(-0.5, 0, 0);\n        glEnd();\n\n        glfwSwapBuffers(window);\n\n        glfwPollEvents();\n    &#125;\n\n    glfwTerminate();\n    return 0;\n&#125;\n\nvoid framebuffer_size_callback(GLFWwindow *window, int width, int height)\n&#123;\n    &#x2F;&#x2F; 改变绘图区域\n    glfwMakeContextCurrent(window);\n    glViewport(0, 0, width, height);\n&#125;\n\nvoid process_keyboard_input(GLFWwindow *window) &#123;\n    &#x2F;&#x2F; 检测到esc就关闭窗口\n    if(glfwGetKey(window, GLFW_KEY_ESCAPE) &#x3D;&#x3D; GLFW_PRESS) &#123;\n        glfwSetWindowShouldClose(window, GL_TRUE);\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">c++ main.cpp glad.c -o main -lgl -lglfw \n.&#x2F;main</code></pre>\n\n<h2 id=\"结果截图\"><a href=\"#结果截图\" class=\"headerlink\" title=\"结果截图\"></a>结果截图</h2><p><img src=\"computer-graphics/opengl/opengl-03/result.png\" alt=\"img\"></p>\n","text":"Creating a window创建窗口是第一步，然而OpenGL仅仅是定义了一系列关于窗口的操作api，而这些操作api实际执行和操作系统和硬件都有很大关系。这也意味着开发者必须自己处理这些问题。 不过，幸运的是我们可以使用一些库来避免自己处理这些问题。例如GLUT,GLFW...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"ComputerGraphics","slug":"ComputerGraphics","count":5,"path":"api/tags/ComputerGraphics.json"},{"name":"OpenGL","slug":"OpenGL","count":4,"path":"api/tags/OpenGL.json"},{"name":"C++","slug":"C","count":4,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Creating-a-window\"><span class=\"toc-text\">Creating a window</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GLFW\"><span class=\"toc-text\">GLFW</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GLAD\"><span class=\"toc-text\">GLAD</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">编写代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">验证</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%9C%E6%88%AA%E5%9B%BE\"><span class=\"toc-text\">结果截图</span></a></li></ol></li></ol>","author":{"name":"Stephen Ling","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Think twice, code once!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"OpenGL - Hello, Triangle","uid":"68f0bef26795408fddf21d88ca9001c0","slug":"computer-graphics/opengl/opengl-04","date":"2022-08-07T13:37:47.000Z","updated":"2022-08-16T08:21:58.286Z","comments":true,"path":"api/articles/computer-graphics/opengl/opengl-04.json","keywords":null,"cover":[],"text":"OpenGL - Hello, Triangle所有东西在OpenGL内都是三维的, 但是屏幕或窗口是2d的。所以所有坐标都需要由3D转为2D坐标。这个转换过程成为管线(pipeline)。这里面分为两大步，第一步坐标转换，第二步将坐标转为像素点绘图。 这些步骤都是高度分化的，所...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"ComputerGraphics","slug":"ComputerGraphics","count":5,"path":"api/tags/ComputerGraphics.json"},{"name":"OpenGL","slug":"OpenGL","count":4,"path":"api/tags/OpenGL.json"},{"name":"C++","slug":"C","count":4,"path":"api/tags/C.json"}],"author":{"name":"Stephen Ling","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Think twice, code once!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"OpenGL - What is OpenGL?","uid":"53754339a6fb973dc05deaeaa99e1d0f","slug":"computer-graphics/opengl/opengl-02","date":"2022-08-07T07:32:29.000Z","updated":"2022-08-16T08:21:58.286Z","comments":true,"path":"api/articles/computer-graphics/opengl/opengl-02.json","keywords":null,"cover":null,"text":"What is OpenGL?OpenGL is mainly considered an API (an Application Programming Interface) that provides us with a large set of functions that...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"ComputerGraphics","slug":"ComputerGraphics","count":5,"path":"api/tags/ComputerGraphics.json"},{"name":"OpenGL","slug":"OpenGL","count":4,"path":"api/tags/OpenGL.json"},{"name":"C++","slug":"C","count":4,"path":"api/tags/C.json"}],"author":{"name":"Stephen Ling","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Think twice, code once!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}